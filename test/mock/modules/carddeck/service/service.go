// Code generated by MockGen. DO NOT EDIT.
// Source: ./modules/carddeck/internal/service/service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/raymondwongso/carddeck/modules/carddeck/entity"
)

// MockDeckRepository is a mock of DeckRepository interface.
type MockDeckRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeckRepositoryMockRecorder
}

// MockDeckRepositoryMockRecorder is the mock recorder for MockDeckRepository.
type MockDeckRepositoryMockRecorder struct {
	mock *MockDeckRepository
}

// NewMockDeckRepository creates a new mock instance.
func NewMockDeckRepository(ctrl *gomock.Controller) *MockDeckRepository {
	mock := &MockDeckRepository{ctrl: ctrl}
	mock.recorder = &MockDeckRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeckRepository) EXPECT() *MockDeckRepositoryMockRecorder {
	return m.recorder
}

// DrawCards mocks base method.
func (m *MockDeckRepository) DrawCards(ctx context.Context, id string, count int64) (*entity.Cards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DrawCards", ctx, id, count)
	ret0, _ := ret[0].(*entity.Cards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DrawCards indicates an expected call of DrawCards.
func (mr *MockDeckRepositoryMockRecorder) DrawCards(ctx, id, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DrawCards", reflect.TypeOf((*MockDeckRepository)(nil).DrawCards), ctx, id, count)
}

// GetByID mocks base method.
func (m *MockDeckRepository) GetByID(ctx context.Context, id string) (*entity.Deck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entity.Deck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockDeckRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockDeckRepository)(nil).GetByID), ctx, id)
}

// Insert mocks base method.
func (m *MockDeckRepository) Insert(ctx context.Context, deck *entity.Deck) (*entity.Deck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, deck)
	ret0, _ := ret[0].(*entity.Deck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockDeckRepositoryMockRecorder) Insert(ctx, deck interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDeckRepository)(nil).Insert), ctx, deck)
}
